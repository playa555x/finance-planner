// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String   @id @default(cuid())
  email            String   @unique
  name             String?
  password         String?  // Hashed password for credential login
  image            String?  // Profile image URL
  emailVerified    DateTime?
  role             String   @default("user") // user, admin
  isActive         Boolean  @default(true)
  lastLoginAt      DateTime?
  lastLoginIp      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Financial planning data
  financialPlans   FinancialPlan[]
  expenses         Expense[]
  dailyBudgets     DailyBudget[]
  fixedCosts       FixedCost[]
  accounts         Account[]
  sessions         Session[]
}

// NextAuth models for OAuth support
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FinancialPlan {
  id                String   @id @default(cuid())
  userId            String
  name              String
  monthlyBudget     Float
  location          String
  currency          String   @default("IDR")
  exchangeRate      Float    @default(0.000059)
  season            String   @default("normal")
  lifestyle         String   @default("bali-standard")
  duration          Int      @default(1)
  hasDog            Boolean  @default(false)
  petCount          Int      @default(0)
  petCosts          Float    @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DailyBudget {
  id                String   @id @default(cuid())
  userId            String
  date              DateTime
  budgetAmount      Float
  spentAmount       Float    @default(0)
  remainingAmount   Float
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses          Expense[]
}

model Expense {
  id                String   @id @default(cuid())
  userId            String
  dailyBudgetId     String?
  amount            Float
  category          String
  description       String
  location          String?
  date              DateTime
  isFixedCost       Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  dailyBudget       DailyBudget? @relation(fields: [dailyBudgetId], references: [id], onDelete: SetNull)
}

model FixedCost {
  id                String   @id @default(cuid())
  userId            String
  name              String
  amount            Float
  category          String
  frequency         String   // monthly, yearly, onetime
  startDate         DateTime
  endDate           DateTime?
  isActive          Boolean  @default(true)
  description       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Global Country Data - Auto-fetched and cached
model Country {
  id                String   @id @default(cuid())
  name              String   @unique
  code              String   @unique // ISO 3166-1 alpha-2 (e.g., "US", "DE", "ID")
  currency          String
  currencySymbol    String
  exchangeRateToUSD Float    @default(1.0)
  exchangeRateToEUR Float    @default(1.0)
  lastFetchedAt     DateTime @default(now())

  // Cost of Living Indices (compared to New York = 100)
  costOfLivingIndex       Float?
  rentIndex               Float?
  groceriesIndex          Float?
  restaurantPriceIndex    Float?
  localPurchasingPower    Float?

  // Additional data
  averageSalary           Float?    // Monthly in local currency
  dataSource              String?   // API source used
  dataQuality             String    @default("estimated") // verified, estimated, outdated

  cities                  City[]
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

// City-specific cost data
model City {
  id                String   @id @default(cuid())
  name              String
  countryId         String
  country           Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)

  // Coordinates
  latitude          Float?
  longitude         Float?

  // Cost multipliers (relative to country average)
  housingMultiplier       Float @default(1.0)
  foodMultiplier          Float @default(1.0)
  transportMultiplier     Float @default(1.0)
  utilitiesMultiplier     Float @default(1.0)
  entertainmentMultiplier Float @default(1.0)

  // Detailed cost data (monthly in local currency)
  avgRentStudio           Float?
  avgRent1Bedroom         Float?
  avgRent3Bedroom         Float?
  avgMealInexpensive      Float?
  avgMealMidRange         Float?
  avgTransportPass        Float?
  avgUtilities            Float?
  avgInternet             Float?
  avgGymMembership        Float?

  // Metadata
  population              Int?
  dataSource              String?
  lastFetchedAt           DateTime @default(now())
  dataQuality             String   @default("estimated")

  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@unique([name, countryId])
}

// API Request Log for rate limiting and debugging
model ApiRequestLog {
  id                String   @id @default(cuid())
  endpoint          String
  countryCode       String?
  cityName          String?
  success           Boolean
  responseTime      Int      // milliseconds
  errorMessage      String?
  dataSource        String   // numbeo, cost-of-living-api, etc.
  createdAt         DateTime @default(now())
}